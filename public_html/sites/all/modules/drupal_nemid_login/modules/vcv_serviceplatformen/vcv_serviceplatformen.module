<?php
/**
 * @file
 * Implements valghalla cpr validation with serviceplatformen.dk
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @copyright 2012 OS2 - Offentligt DigitaliseringsfÃ¦llesskab.
 * See README.md at https://github.com/os2web/valghalla_mail
 */

/**
 * Implements hook_menu().
 */
function vcv_serviceplatformen_menu() {
  $items['admin/valghalla/validator/vcv_serviceplatformen'] = array(
    'title' => 'Indstillinger for serviceplatformen.dk',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vcv_serviceplatformen_settings'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Implements hook_valghalla_cpr_validator_cpr_service().
 */
function vcv_serviceplatformen_valghalla_volunteer_validator_cpr_service() {
  return array(
    'serviceplatformen' => array(
      // Label for the plugin, shown in CPR validator settings.
      'label' => 'serviceplatformen.dk',
      // Short description for the plugin, shown in CPR validator settings.
      'description' => t('Implements serviceplatformen.dk CPRBasicInformation'),
      // If the plugin implements CPR validation, the callback must be
      // specified here.
      'validate_cpr' => 'vcv_serviceplatformen_validate_cpr',
      // Same as above, but just for fetching the address for the
      // volunteer.
      'get_address' => 'vcv_serviceplatformen_get_address',
      // Url for plugin configuration.
      'config' => 'admin/valghalla/validator/vcv_serviceplatformen',
      // Get cpr form volunteer info.
      'get_cpr' => 'vcv_serviceplatformen_get_cpr',
    ),
  );
}

/**
 * Page callback for settings.
 */
function vcv_serviceplatformen_settings() {
  if (variable_get('use_serviceplatform_to_get_address') && module_exists('vcv_serviceplatformen')) {
    $cpr = variable_get('test_cpr');
    $output = '';
    if ($cpr != '') {
      $message = vcv_serviceplatformen_get_address($cpr);

      if ($message['status']) {
        $output = '<div style="font-size: 15px; color : green"><b>Succeed</b></div>';
        $output .= '<div> Test CPR nr. ' . $cpr . '<br />';
        foreach ($message as $key => $item) {
          if ($key != 'status') {
            $output .= $key . ': ' . $item . '<br />';
          }
        }
        $output .= '</div>';
      }
      else {
        $output = '<b style = "color : red">Error: ' . $message['text'] . '</b>';
      }
      variable_set('test_cpr', '');
    }


  }
  $form['test_cpr_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test CPR'),
  );
  $form['test_cpr_fieldset']['test_cpr'] = array(
    '#type' => 'textfield',
    '#title' => t('Test cpr nr.'),
  );

  $form['test_cpr_fieldset']['test_serviceplatformen_function'] = array(
    '#type' => 'item',
    '#markup' => $output,
  );

  $form['stam'] = array(
    '#title' => 'Person stamdata',
    '#type' => 'fieldset',
  );

  $form['stam']['vcv_serviceplatformen_serviceagreementuuid'] = array(
    '#type' => 'textfield',
    '#title' => 'Serviceaftale UUID',
    '#default_value' => variable_get('vcv_serviceplatformen_serviceagreementuuid', ''),
  );

  $form['stam']['vcv_serviceplatformen_serviceuuid'] = array(
    '#type' => 'textfield',
    '#title' => 'Service UUID',
    '#default_value' => variable_get('vcv_serviceplatformen_serviceuuid', ''),
  );

  $form['stam']['vcv_serviceplatformen_wsdl'] = array(
    '#type' => 'textfield',
    '#title' => 'Service WSDL location',
    '#default_value' => variable_get('vcv_serviceplatformen_wsdl', ''),
    '#description' => t('ex. https://exttestwww.serviceplatformen.dk/administration/wsdl/CPRBasicInformationService.wsdl'),
  );

  $form['stam']['vcv_serviceplatformen_location'] = array(
    '#type' => 'textfield',
    '#title' => 'Service location',
    '#default_value' => variable_get('vcv_serviceplatformen_location', ''),
    '#description' => t('ex. https://exttest.serviceplatformen.dk/service/CPRBasicInformation/CPRBasicInformation/1'),
  );

  $form['adrsog'] = array(
    '#title' => 'ADRSOG1',
    '#type' => 'fieldset',
  );

  $form['adrsog']['vcv_serviceplatformen_adrsog_serviceagreementuuid'] = array(
    '#type' => 'textfield',
    '#title' => 'Serviceaftale UUID',
    '#default_value' => variable_get('vcv_serviceplatformen_adrsog_serviceagreementuuid', ''),
  );

  $form['adrsog']['vcv_serviceplatformen_adrsog_serviceuuid'] = array(
    '#type' => 'textfield',
    '#title' => 'Service UUID',
    '#default_value' => variable_get('vcv_serviceplatformen_adrsog_serviceuuid', ''),
  );

  $form['adrsog']['vcv_serviceplatformen_adrsog_location'] = array(
    '#type' => 'textfield',
    '#title' => 'Service location',
    '#default_value' => variable_get('vcv_serviceplatformen_adrsog_location', ''),
    '#description' => t('ex. https://exttest.serviceplatformen.dk/service/CPRBasicInformation/CPRBasicInformation/1'),
  );

  $form['vcv_serviceplatformen_usersystemuuid'] = array(
    '#type' => 'textfield',
    '#title' => 'System UUID',
    '#default_value' => variable_get('vcv_serviceplatformen_usersystemuuid', ''),
  );

  $form['vcv_serviceplatformen_useruuid'] = array(
    '#type' => 'textfield',
    '#title' => 'Kommune UUID',
    '#default_value' => variable_get('vcv_serviceplatformen_useruuid', ''),
  );

  $form['vcv_serviceplatformen_accountinginfo'] = array(
    '#type' => 'textfield',
    '#title' => 'AccountingInfo',
    '#default_value' => variable_get('vcv_serviceplatformen_accountinginfo', ''),
  );

  $form['vcv_serviceplatformen_certfile_passphrase'] = array(
    '#type' => 'password',
    '#title' => 'Certfile passphrase',
    '#default_value' => variable_get('vcv_serviceplatformen_certfile_passphrase', ''),
  );

  $form['vcv_serviceplatformen_certfile'] = array(
    '#type' => 'textfield',
    '#title' => 'Certfile',
    '#default_value' => variable_get('vcv_serviceplatformen_certfile', ''),
  );

  $form = system_settings_form($form);
  array_unshift($form['#submit'], 'vcv_serviceplatformen_settings_submit');

  return $form;
}

/**
 * Extra submit handler for serviceplatformen settings.
 */
function vcv_serviceplatformen_settings_submit(&$form, &$form_state) {
  if ($form_state['values']['vcv_serviceplatformen_certfile_passphrase'] == '') {
    unset($form_state['values']['vcv_serviceplatformen_certfile_passphrase']);
  }
}

/**
 * Validate cpr callback.
 *
 * @cpr String - PSN (cpr) ([0-9]{6}\-[0-9]{4})
 *
 * @return array
 *   [status] => TRUE/FALSE
 *   [text] => Descriptive text shown when CPR doesn't validate
 */
function vcv_serviceplatformen_validate_cpr($cpr) {
  return vcv_serviceplatformen_query($cpr);
}

/**
 * Query the webservice.
 */
function vcv_serviceplatformen_query($cpr) {
  ini_set('soap.wsdl_cache_enabled', 0);
  ini_set('soap.wsdl_cache_ttl', 0);

  try {
    $wsdl_address = variable_get('vcv_serviceplatformen_wsdl');
    $service_location = variable_get('vcv_serviceplatformen_location');
    $certfile_passphrase = variable_get('vcv_serviceplatformen_certfile_passphrase');
    $certfile = variable_get('vcv_serviceplatformen_certfile');

    $client = new SoapClient($wsdl_address, array(
      'location' => $service_location,
      'local_cert' => $certfile,
      'passphrase' => $certfile_passphrase,
      'trace' => TRUE,
    ));

    $serviceagreementuuid = variable_get('vcv_serviceplatformen_serviceagreementuuid');
    $usersystemuuid = variable_get('vcv_serviceplatformen_usersystemuuid');
    $useruuid = variable_get('vcv_serviceplatformen_useruuid');
    $serviceuuid = variable_get('vcv_serviceplatformen_serviceuuid');
    $accountinginfo = variable_get('vcv_serviceplatformen_accountinginfo');
    global $user;
    $onbehalfofuser = $user->name;

    $pnr = str_replace('-', '', $cpr);

    $request = array(
      'InvocationContext' => array(
        'ServiceAgreementUUID' => $serviceagreementuuid,
        'UserSystemUUID' => $usersystemuuid,
        'UserUUID' => $useruuid,
        'ServiceUUID' => $serviceuuid,
        'AccountingInfo' => $accountinginfo,
        'OnBehalfOfUser' => $onbehalfofuser,
      ),
      'PNR' => $pnr,
    );

    $response = (array) $client->callCPRBasicInformationService($request);

    $response['status'] = TRUE;
    return $response;

  }
  catch (Exception $e) {
    list($fault, $message) = explode(':', $e->faultstring);

    if (!$message) {
      $message = $e->faultstring;
    }

    return array(
      'status' => FALSE,
      'text' => $message,
    );
  }
}

/**
 * Fetch address for the specified CPR.
 *
 * @cpr
 *  String - PSN (cpr) ([0-9]{6}\-[0-9]{4})
 *
 * @return array
 *   [status] => TRUE/FALSE
 *   [address] => Roadname 10
 *   [zipcode] => 1212
 *   [text] => Descriptive text if something goes wrong
 */
function vcv_serviceplatformen_get_address($cpr) {
  $message = vcv_serviceplatformen_query($cpr);

  // If all goes well we return de address as valghalla wants it.
  if ($message['status']) {
    return array(
      'status' => TRUE,
      'name' => isset($message['adresseringsnavn']) ? $message['adresseringsnavn'] : '',
      'road' => isset($message['vejadresseringsnavn']) ? $message['vejadresseringsnavn'] : '',
      'road_no' => isset($message['husnummer']) ? $message['husnummer'] : '',
      'floor' => isset($message['etage']) ? $message['etage'] : '',
      'door' => isset($message['sidedoer']) ? $message['sidedoer'] : '',
      'zipcode' => isset($message['postnummer']) ? $message['postnummer'] : '',
      'city' => isset($message['postdistrikt']) ? $message['postdistrikt'] : '',
      'coname' => isset($message['conavn']) ? $message['conavn'] : '',
    );
  }
  else {
    return $message;
  }
}

/**
 * Get CPR for specified address and name.
 */
function vcv_serviceplatformen_get_cpr($volunteer_info) {
  $service_location = variable_get('vcv_serviceplatformen_adrsog_location');
  $certfile_passphrase = variable_get('vcv_serviceplatformen_certfile_passphrase');
  $certfile = variable_get('vcv_serviceplatformen_certfile');

  // ADRSOG1 specific uuids.
  $serviceagreementuuid = variable_get('vcv_serviceplatformen_adrsog_serviceagreementuuid');
  $serviceuuid = variable_get('vcv_serviceplatformen_adrsog_serviceuuid');
  // Generic/municipality uuids.
  $usersystemuuid = variable_get('vcv_serviceplatformen_usersystemuuid');
  $useruuid = variable_get('vcv_serviceplatformen_useruuid');
  // Extra info.
  $accountinginfo = variable_get('vcv_serviceplatformen_accountinginfo');
  global $user;
  $onbehalfofuser = $user->name;

  // Generate gctp message.
  $message_start = '<Gctp v="1.0"><System r="CprSoeg"><Service r="ADRSOG1"><CprServiceHeader r="ADRSOG1"><Key>';

  $message_fields = '
    <Field r="POST" v="' . $volunteer_info['zipcode'] . '"/>
    <Field r="VNVN" v="' . $volunteer_info['road'] . '"/>
    <Field r="HNR" v="' . $volunteer_info['road_no'] . '"/>';

  if (isset($volunteer_info['floor']) && $volunteer_info['floor']) {
    $message_fields = '<Field r="ETAG" v="' . $volunteer_info['floor'] . '"/>';
  }

  $message_end = '</Key></CprServiceHeader></Service></System></Gctp>';

  $message = $message_start . $message_fields . $message_end;

  // Entire xml post string.
  $xml_post_string = <<<EOL
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:kom="http://serviceplatformen.dk/xml/wsdl/soap11/CprService/1/" xmlns:invctx="http://serviceplatformen.dk/xml/schemas/InvocationContext/1/">
  <soapenv:Header/>
  <soapenv:Body>
    <kom:callGCTPCheckServiceRequest>
      <invctx:InvocationContext>
        <invctx:ServiceAgreementUUID>$serviceagreementuuid</invctx:ServiceAgreementUUID>
        <invctx:UserSystemUUID>$usersystemuuid</invctx:UserSystemUUID>
        <invctx:UserUUID>$useruuid</invctx:UserUUID>
        <invctx:ServiceUUID>$serviceuuid</invctx:ServiceUUID>
        <invctx:OnBehalfOfUser>$serviceuuid</invctx:OnBehalfOfUser>
        <invctx:AccountingInfo>$serviceuuid</invctx:AccountingInfo>
      </invctx:InvocationContext>
      <kom:gctpMessage>
        <![CDATA[
$message
]]>
      </kom:gctpMessage>
    </kom:callGCTPCheckServiceRequest>
  </soapenv:Body>
</soapenv:Envelope>
EOL;

  try {
    // Curl call to service.
    $headers = array(
      "Content-type: text/xml;charset=\"utf-8\"",
      "Accept: text/xml",
      "Cache-Control: no-cache",
      "Pragma: no-cache",
      "Content-length: " . strlen($xml_post_string),
    );

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $service_location);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_post_string);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_SSLCERT, $certfile);
    curl_setopt($ch, CURLOPT_SSLCERTPASSWD, $certfile_passphrase);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $response = curl_exec($ch);

    // If no theres no response from the service, return an error.
    if (!$response) {
      return array(
        'status' => 'error',
      );
    }

    curl_close($ch);

    $xml = simplexml_load_string($response);
    $xml->registerXPathNamespace('ns2', 'http://serviceplatformen.dk/xml/wsdl/soap11/CprService/1/');

    $gctp = end(end($xml->xpath('//env:Body/ns2:callGCTPCheckServiceResponse/ns2:result')));

    $xml = simplexml_load_string($gctp);

    // Init variables.
    $result_row = FALSE;
    $pnr = FALSE;
    $name = FALSE;

    // Go through the resulting rows.
    foreach ($xml->System->Service->CprData->Rolle->Table->Row as $row) {
      $row_attributes = (array) $row->attributes();

      foreach ($row->Field as $delta => $field) {
        $attributes = (array) $field->attributes();

        // Check if the first name of volunteer matches data in response.
        if ($attributes['@attributes']['r'] == 'CNVN_ADRNVN') {
          if (vcv_serviceplatformen_match_name($attributes['@attributes']['t'], $volunteer_info['name'])) {
            $name = TRUE;
          }
        }

        // If match the entered birthdate with the PNR. We assume this must the
        // the one.
        if ($attributes['@attributes']['r'] == 'PNR') {
          if (vcv_serviceplatformen_match_cpr($attributes['@attributes']['v'], $volunteer_info['birthdate']) && $name) {
            $result_row = (array) $row;
          }
        }
      }
    }

    if ($result_row) {
      foreach ($result_row['Field'] as $field) {
        $attributes = (array) $field->attributes();

        if ($attributes['@attributes']['r'] == 'PNR') {
          $pnr = $attributes['@attributes']['v'];
        }
      }
    }

    if ($pnr) {
      return array(
        'status' => 'success',
        'pnr' => $pnr,
      );
    }
    else {
      return array(
        'status' => 'not found',
      );
    }

  }
  catch (Exception $e) {
    error_log(__FILE__ . ' : ' . __LINE__ . ': ' .  print_r($e, 1));

    return array(
      'status' => 'error',
    );
  }
}

/**
 * Match birthdate to part of PSN from serviceplatformen.
 */
function vcv_serviceplatformen_match_cpr($value, $find) {
  $reg_birthdate = substr($value, 0, 6);

  return $reg_birthdate == $find;
}

/**
 * Match name from serviceplatformen to the volunteers name.
 */
function vcv_serviceplatformen_match_name($value, $find) {
  $value_array = explode(' ', $value);
  $find_array = explode(' ', $find);

  return strtolower($find_array[0]) == strtolower($value_array[0]);
}
